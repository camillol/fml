class SolarHeatingSystem;

	visible
		sun_heat, tap_control, start_maintenance, cold_supply_temperature;

	temporal domain natural;

	TD items
		predicates
		variables

	TI items
		consts
			total_volume: real;
	
	modules
		controller: Controller;
		collector: Collector;
		tank: Tank;
		pump: Pump;
		tap: Tap;		-- user drawing hot water
		tank_sensor, collector_sensor: Sensor;
	
	connections {
		(controller.pump_control, pump.control),
		(controller.pump_state, pump.state),
		(controller.temp_tank, tank_sensor.temp_reading),
		(controller.temp_collector, collector_sensor.temp_reading),
		
		(collector_sensor.thermometer, collector.out_temperature),
		(tank_sensor.thermometer, tank.out_temperature),
		
		(pump.in_volume, tank.out_volume),
		(pump.in_temperature, tank.out_temperature),

		(pump.out_volume, collector.in_volume),
		(pump.out_temperature, collector.in_temperature),
		
		(tank.in_volume, collector.out_volume),
		(tank.in_temperature, collector.out_temperature),
		
		(tap.in_volume, tank.tap_out_volume),
		(tap.in_temperature, tank.tap_out_temperature),

		(tap.out_volume, tank.tap_in_volume),
		(tap.out_temperature, tank.tap_in_temperature)

		(maintainer.working, controller.maintenance),
		
		-- external interface
		(sun_heat, collector.sun_heat),
		(tap_control, tap.control),
		(start_maintenance, maintainer.startwork),
		(cold_supply_temperature, tap.cold_supply_temperature),
	}
	
	axioms
		vars
			t: real;

		NoLeaks:
			tank.volume + collector.volume = total_volume;
		
		ColdSupplyLiquid:
			0 < cold_supply_temperature < 100;

end SolarHeatingSystem.
