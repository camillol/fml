variables
	start:[0..1],

	pump_start:[0..1], pump_stop:[0..1], pump_on:[0..1], pump_off:[0..1],
	tap_on:[0..1],

	temp_tank:[1..5], temp_collector:[1..5], delta_temp:[0..2],
	pump_volume:[0..1],

	collector_temperature:[1..5],
	sun_heat:[0..2],
	collector_total_in_volume_temperature_product:[0..5],
	collector_total_out_volume_temperature_product:[0..5],
	collector_temp_variation:[-2..4],
	collector_temp_variation_bs:[-2..2],

	tank_temperature:[1..5],
	tank_total_in_volume_temperature_product:[0..5],
	tank_total_out_volume_temperature_product:[0..5],
	tank_total_in_volume_temperature_product_A:[0..5],
	tank_total_in_volume_temperature_product_B:[0..5],
	tank_temp_variation:[-2..2],

	tap_volume:[0..1],

	update:[0..1]
	

constants
	DELTA_LOW = 0, DELTA_MEDIUM = 1, DELTA_HIGH = 2, PUMP_VOLUME=1, COLD_SUPPLY_TEMPERATURE=1, TAP_VOLUME=1,
	COLLECTOR_MAX_VOLUME=10, WATER_SPECIFIC_HEAT=1, WATER_DENSITY=1, TANK_MAX_VOLUME=20,
				POLLING_INTERVAL=3, TOTAL_VOLUME=30

axioms

// in volume4.trio we have proven that
//
// collector_out_volume = pump_volume
// collector_delta_volume=0
// tank_delta_volume=0
//
// we treat them as assumptions now
/////

	controller_define_delta:
		(temp_collector = 5 -> (
			((temp_tank = 1 | temp_tank = 2 | temp_tank = 3) -> delta_temp = DELTA_HIGH) &
			((temp_tank = 4) -> delta_temp = DELTA_MEDIUM) &
			((temp_tank = 5) -> delta_temp = DELTA_LOW)
		)) &
		(temp_collector = 4 -> (
			((temp_tank = 1 | temp_tank = 2) -> delta_temp = DELTA_HIGH) &
			((temp_tank = 3) -> delta_temp = DELTA_MEDIUM) &
			((temp_tank = 4 | temp_tank = 5) -> delta_temp = DELTA_LOW)
		)) &
		(temp_collector = 3 -> (
			((temp_tank = 1) -> delta_temp = DELTA_HIGH) &
			((temp_tank = 2) -> delta_temp = DELTA_MEDIUM) &
			((temp_tank = 3 | temp_tank = 4 | temp_tank = 5) -> delta_temp = DELTA_LOW)
		)) &
		(temp_collector = 2 -> (
			((temp_tank = 1) -> delta_temp = DELTA_MEDIUM) &
			((temp_tank = 2 | temp_tank = 3 | temp_tank = 4 | temp_tank = 5) -> delta_temp = DELTA_LOW)
		)) &
		(temp_collector = 1 -> delta_temp = DELTA_LOW);
	
	controller_start:
		UpToNow(pump_off=1) & (delta_temp = DELTA_HIGH) <-> pump_start=1;
	
	controller_stop:
		UpToNow(pump_on=1) & (delta_temp = DELTA_LOW) <-> pump_stop=1;

	pump_start_off:
		AlwP(pump_start=0) -> pump_off=1;

	pump_when_off:
		pump_off=1 -> pump_volume = 0;
		
	pump_when_on:
		pump_on=1 -> pump_volume = PUMP_VOLUME;
		
	pump_start:
		UpToNow(pump_off=1) & pump_start=1 -> Until_w(pump_on=1, pump_stop=1);

	pump_stop:
		UpToNow(pump_on=1) & pump_stop=1 -> Until_w(pump_off=1, pump_start=1);

	pump_state_unique:
		(pump_off=1 & pump_on=0) | (pump_on=1 & pump_off=0);

	tap_when_off:
		tap_on=0 -> tap_volume = 0;
		
	tap_when_on:
		tap_on=1 -> tap_volume = TAP_VOLUME;


		collector_total_in_volume_temperature_product_definition:
			(pump_volume = 1 -> collector_total_in_volume_temperature_product = tank_temperature) &
			(pump_volume = 0 -> collector_total_in_volume_temperature_product = 0);

		collector_total_out_volume_temperature_product_definition:
			(pump_volume = 1 -> collector_total_out_volume_temperature_product = collector_temperature) &
			(pump_volume = 0 -> collector_total_out_volume_temperature_product = 0);

		collector_temperature_variation_before_sun:
			(collector_total_out_volume_temperature_product = collector_total_in_volume_temperature_product ->
				collector_temp_variation_bs = 0) &
			(collector_total_out_volume_temperature_product > collector_total_in_volume_temperature_product ->
				collector_temp_variation_bs = -2) &
			(collector_total_out_volume_temperature_product < collector_total_in_volume_temperature_product ->
				collector_temp_variation_bs = 2);

		collector_temperature_variation:
			(sun_heat = 0 -> (collector_temp_variation = collector_temp_variation_bs)) &
			(sun_heat = 1 -> (
				(collector_temp_variation_bs = 0 -> collector_temp_variation = 1) &
				(collector_temp_variation_bs = -2 -> collector_temp_variation = -1) &
				(collector_temp_variation_bs = 2 -> collector_temp_variation = 3)
			)) &
			(sun_heat = 2 -> (
				(collector_temp_variation_bs = 0 -> collector_temp_variation = 2) &
				(collector_temp_variation_bs = -2 -> collector_temp_variation = 0) &
				(collector_temp_variation_bs = 2 -> collector_temp_variation = 4)
			));

		collector_temperature_next:
			(
				(collector_temperature = 1 & collector_temp_variation = 0) |
				(collector_temperature = 2 & collector_temp_variation = -1) |
				(collector_temperature = 3 & collector_temp_variation = -2)
				-> Futr(collector_temperature = 1,1)) &
			(
				(collector_temperature = 1 & collector_temp_variation = 1) |
				(collector_temperature = 2 & collector_temp_variation = 0) |
				(collector_temperature = 3 & collector_temp_variation = -1) |
				(collector_temperature = 4 & collector_temp_variation = -2)
				-> Futr(collector_temperature = 2,1)) &
			(
				(collector_temperature = 1 & collector_temp_variation = 2) |
				(collector_temperature = 2 & collector_temp_variation = 1) |
				(collector_temperature = 3 & collector_temp_variation = 0) |
				(collector_temperature = 4 & collector_temp_variation = -1) |
				(collector_temperature = 5 & collector_temp_variation = -2)
				-> Futr(collector_temperature = 3,1)) &
			(
				(collector_temperature = 1 & collector_temp_variation = 3) |
				(collector_temperature = 2 & collector_temp_variation = 2) |
				(collector_temperature = 3 & collector_temp_variation = 1) |
				(collector_temperature = 4 & collector_temp_variation = 0) |
				(collector_temperature = 5 & collector_temp_variation = -1)
				-> Futr(collector_temperature = 4,1)) &
			(
				(collector_temperature = 1 & collector_temp_variation = 4) |
				(collector_temperature = 2 & collector_temp_variation = 3) |
				(collector_temperature = 3 & collector_temp_variation = 2) |
				(collector_temperature = 4 & collector_temp_variation = 1) |
				(collector_temperature = 5 & collector_temp_variation = 0)
				-> Futr(collector_temperature = 5,1));

		tank_total_in_volume_temperature_product_A:
			(pump_volume = 1 -> tank_total_in_volume_temperature_product_A = collector_temperature) &
			(pump_volume = 0 -> tank_total_in_volume_temperature_product_A = 0);

		tank_total_in_volume_temperature_product_B:
			(tap_volume = 1 -> tank_total_in_volume_temperature_product_B = COLD_SUPPLY_TEMPERATURE) &
			(tap_volume = 0 -> tank_total_in_volume_temperature_product_B = 0);
		
		tank_total_in_volume_temperature_product_definition:
			(tank_total_in_volume_temperature_product_A > 0 & tank_total_in_volume_temperature_product_B > 0 ->
				tank_total_in_volume_temperature_product = 2) &
			(tank_total_in_volume_temperature_product_A > 0 & tank_total_in_volume_temperature_product_B = 0 |
			 tank_total_in_volume_temperature_product_A = 0 & tank_total_in_volume_temperature_product_B > 0 ->
				tank_total_in_volume_temperature_product = 1) &
			(tank_total_in_volume_temperature_product_A = 0 & tank_total_in_volume_temperature_product_B = 0 ->
				tank_total_in_volume_temperature_product = 0);

		tank_total_out_volume_temperature_product_definition:
			(pump_volume = 1 & tap_volume = 1 -> tank_total_out_volume_temperature_product = 2) &
			(pump_volume = 1 & tap_volume = 0 |
			 pump_volume = 0 & tap_volume = 1 -> tank_total_out_volume_temperature_product = 1) &
			(pump_volume = 0 & tap_volume = 0 -> tank_total_out_volume_temperature_product = 0);

		tank_temperature_variation:
			(tank_total_out_volume_temperature_product = tank_total_in_volume_temperature_product ->
				tank_temp_variation = 0) &
			(tank_total_out_volume_temperature_product > tank_total_in_volume_temperature_product ->
				tank_temp_variation = -2) &
			(tank_total_out_volume_temperature_product < tank_total_in_volume_temperature_product ->
				tank_temp_variation = 2);

		tank_temperature_next:
			(
				(tank_temperature = 1 & tank_temp_variation = 0) |
				(tank_temperature = 2 & tank_temp_variation = -1) |
				(tank_temperature = 3 & tank_temp_variation = -2)
				-> Futr(tank_temperature = 1,1)) &
			(
				(tank_temperature = 1 & tank_temp_variation = 1) |
				(tank_temperature = 2 & tank_temp_variation = 0) |
				(tank_temperature = 3 & tank_temp_variation = -1) |
				(tank_temperature = 4 & tank_temp_variation = -2)
				-> Futr(tank_temperature = 2,1)) &
			(
				(tank_temperature = 1 & tank_temp_variation = 2) |
				(tank_temperature = 2 & tank_temp_variation = 1) |
				(tank_temperature = 3 & tank_temp_variation = 0) |
				(tank_temperature = 4 & tank_temp_variation = -1) |
				(tank_temperature = 5 & tank_temp_variation = -2)
				-> Futr(tank_temperature = 3,1)) &
			(
				(tank_temperature = 1 & tank_temp_variation = 3) |
				(tank_temperature = 2 & tank_temp_variation = 2) |
				(tank_temperature = 3 & tank_temp_variation = 1) |
				(tank_temperature = 4 & tank_temp_variation = 0) |
				(tank_temperature = 5 & tank_temp_variation = -1)
				-> Futr(tank_temperature = 4,1)) &
			(
				(tank_temperature = 1 & tank_temp_variation = 4) |
				(tank_temperature = 2 & tank_temp_variation = 3) |
				(tank_temperature = 3 & tank_temp_variation = 2) |
				(tank_temperature = 4 & tank_temp_variation = 1) |
				(tank_temperature = 5 & tank_temp_variation = 0)
				-> Futr(tank_temperature = 5,1));

		periodicity:
			update=1 -> NextTime(update=1, POLLING_INTERVAL);
		
		sens_tank_update:
			update=1 -> temp_tank = tank_temperature;

		sens_collector_update:
			update=1 -> temp_collector = collector_temperature;

		sens_tank_hold:
			update=0 -> (
				(Past(temp_tank=1, 1) -> temp_tank=1) &
				(Past(temp_tank=2, 1) -> temp_tank=2) &
				(Past(temp_tank=3, 1) -> temp_tank=3) &
				(Past(temp_tank=4, 1) -> temp_tank=4) &
				(Past(temp_tank=5, 1) -> temp_tank=5)
			);

		sens_collector_hold:
			update=0 -> (
				(Past(temp_collector=1, 1) -> temp_collector=1) &
				(Past(temp_collector=2, 1) -> temp_collector=2) &
				(Past(temp_collector=3, 1) -> temp_collector=3) &
				(Past(temp_collector=4, 1) -> temp_collector=4) &
				(Past(temp_collector=5, 1) -> temp_collector=5)
			);
		
		start_update:
			AlwP(update=0) -> update=1;

