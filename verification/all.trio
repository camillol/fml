variables
	pump_start:[0..1], pump_stop:[0..1], pump_on:[0..1], pump_off:[0..1],
	tap_on:[0..1],

	temp_tank:[1..10], temp_collector:[1..10], delta_temp:[-9..9],
	pump_in_volume:[0..1], pump_in_temperature:[1..10], pump_out_volume:[0..1], pump_out_temperature:[1..10],	

	collector_temperature:[1..10], collector_volume:[9..11],
	collector_out_volume:[0..1], collector_out_temperature:[1..10],
	collector_delta_volume:[-1..1], sun_heat:[0..2],
	collector_total_in_volume_temperature_product:[0..10],
	collector_total_out_volume_temperature_product:[0..10],

			tank_temperature:[1..10], tank_volume:[19..21],
			tank_delta_volume:[-1..1],
		tank_total_in_volume_temperature_product:[0..10],
	tank_total_out_volume_temperature_product:[0..10],

	tap_in_volume:[0..1], tap_out_volume:[0..1],
	tap_in_temperature:[1..10], tap_out_temperature:[1..10],

						update:[0..1],
	
	old_collector_volume:[0..1], old_collector_delta_volume:[0..1],
	old_collector_temperature:[1..10],
	old_collector_total_in_volume_temperature_product:[0..10],
	old_collector_total_out_volume_temperature_product:[0..10],


			old_tank_temperature:[1..10], old_tank_volume:[19..21],
			old_tank_delta_volume:[-1..1],
			old_tank_total_in_volume_temperature_product:[0..10],
	old_tank_total_out_volume_temperature_product:[0..10],
	
	old_temp_tank:[1..10], old_temp_collector:[1..10]


constants
	DELTA_LOW_THRESH=2, DELTA_HIGH_THRESH=4, PUMP_VOLUME=1, COLD_SUPPLY_TEMPERATURE=1, TAP_VOLUME=1,
	COLLECTOR_MAX_VOLUME=10, WATER_SPECIFIC_HEAT=1, WATER_DENSITY=1, TANK_MAX_VOLUME=20,
				POLLING_INTERVAL=3

axioms
	
	controller_sane_consts:
		DELTA_HIGH_THRESH > DELTA_LOW_THRESH & DELTA_LOW_THRESH > 0;
	
	controller_define_delta:
		delta_temp = temp_collector - temp_tank;
	
	controller_start:
		UpToNow(pump_off=1) & delta_temp > DELTA_HIGH_THRESH <-> pump_start=1;
	
	controller_stop:
		UpToNow(pump_on=1) & delta_temp < DELTA_LOW_THRESH <-> pump_stop=1;

	pump_start_off:
		AlwP(pump_start=0) -> pump_off=1;

	pump_same_amount:
		pump_in_volume = pump_out_volume;
			
	pump_same_temp:
		pump_in_temperature = pump_out_temperature;
		
	pump_when_off:
		pump_off=1 -> pump_in_volume = 0;
		
	pump_when_on:
		pump_on=1 -> pump_in_volume = PUMP_VOLUME;
		
	pump_start:
		UpToNow(pump_off=1) & pump_start=1 -> Until_w(pump_on=1, pump_stop=1);

	pump_stop:
		UpToNow(pump_on=1) & pump_stop=1 -> Until_w(pump_off=1, pump_start=1);

	pump_state_unique:
		(pump_off=1 & pump_on=0) | (pump_on=1 & pump_off=0);

	tap_same_amount:
		tap_in_volume = tap_out_volume;
		
	tap_temp:
		tap_out_temperature = COLD_SUPPLY_TEMPERATURE;
		
	tap_when_off:
		tap_on=0 -> tap_in_volume = 0;
		
	tap_when_on:
		tap_on=1 -> tap_in_volume = TAP_VOLUME;


		collector_no_state_changes:
			0 < collector_temperature & collector_temperature < 100 &
			0 < pump_out_temperature & pump_out_temperature < 100 &
			0 < collector_out_temperature & collector_out_temperature < 100;
			
		collector_volume_within_bounds: 
			0 < collector_volume & collector_volume <= COLLECTOR_MAX_VOLUME;

		collector_delta_volume_definition:
			collector_delta_volume = pump_out_volume - collector_out_volume;
		
		collector_volume_change:
			collector_volume = old_collector_volume + old_collector_delta_volume;
		
		collector_temperature_out:
			collector_out_temperature = collector_temperature;
		
		collector_total_in_volume_temperature_product_definition:
			collector_total_in_volume_temperature_product = pump_out_volume * pump_out_temperature;

		collector_total_out_volume_temperature_product_definition:
			collector_total_out_volume_temperature_product = collector_out_volume * collector_temperature;

		collector_temperature_change:
			collector_temperature = (
						(
							old_collector_volume * old_collector_temperature
							- old_collector_total_out_volume_temperature_product
							+ old_collector_total_in_volume_temperature_product
						) / collector_volume
						+ sun_heat / (WATER_SPECIFIC_HEAT * collector_volume * WATER_DENSITY)
					);


		no_state_changes_tap:
			0 < tap_in_temperature & tap_in_temperature < 100 &
			0 < tap_out_temperature & tap_out_temperature < 100;

		tank_no_state_changes:
			0 < tank_temperature & tank_temperature < 100 &
			0 < pump_in_temperature & pump_in_temperature < 100;
			
		tank_volume_within_bounds: 
			0 < tank_volume & tank_volume <= TANK_MAX_VOLUME;

		tank_delta_volume_definition:
			tank_delta_volume = collector_out_volume - pump_in_volume + tap_in_volume - tap_out_volume;

		tank_temperature_out_tap:
			tap_out_temperature = tank_temperature;
		
		tank_volume_change:
			tank_volume = old_tank_volume + old_tank_delta_volume;
		
		tank_temperature_out:
			pump_in_temperature = tank_temperature;
		
		tank_total_in_volume_temperature_product_definition:
			tank_total_in_volume_temperature_product = collector_out_volume * collector_out_temperature +
							tap_in_volume * tap_in_temperature;

		tank_total_out_volume_temperature_product_definition:
			tank_total_out_volume_temperature_product = (pump_in_volume + tap_out_volume) * tank_temperature;

		tank_temperature_change:
			tank_temperature = (
						(
							old_tank_volume * old_tank_temperature
							- old_tank_total_out_volume_temperature_product
							+ old_tank_total_in_volume_temperature_product
						) / tank_volume
					);


		periodicity:
			update=1 -> NextTime(update=1, POLLING_INTERVAL);
		
		sens_tank_update:
			update=1 -> temp_tank = tank_temperature;

		sens_collector_update:
			update=1 -> temp_collector = collector_temperature;

		sens_tank_hold:
			update=0 -> temp_tank = old_temp_tank;

		sens_collector_hold:
			update=0 -> temp_collector = old_temp_collector;
		
		start_update:
			AlwP(update=0) -> update=1;

