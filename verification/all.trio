variables
	pump_start:[0..1], pump_stop:[0..1], pump_on:[0..1], pump_off:[0..1],
	tap_on:[0..1],

	temp_tank:[1..10], temp_collector:[1..10], delta_temp:[-9..9],
	pump_in_volume:[0..1], pump_in_temperature:[1..10], pump_out_volume:[0..1], pump_out_temperature:[1..10]	

	collector_temperature:[1..10], collector_volume:[9..11],
	collector_out_volume:[0..1], collector_out_temperature:[1..10],
	collector_delta_volume:[-1..1], sun_heat:[0..2],

			tank_temperature:[1..10], tank_volume:[19..21],
			tank_delta_volume:[-1..1],
						update:[0..1]


constants
	DELTA_LOW_THRESH=2, DELTA_HIGH_THRESH=4, PUMP_VOLUME=1, COLD_SUPPLY_TEMPERATURE=1, TAP_VOLUME=1
	COLLECTOR_MAX_VOLUME=10, WATER_SPECIFIC_HEAT=1, WATER_DENSITY=1, TANK_MAX_VOLUME=20,
				POLLING_INTERVAL=3

axioms
	
	controller_sane_consts:
		DELTA_HIGH_THRESH > DELTA_LOW_THRESH > 0
	
	controller_define_delta:
		delta_temp = temp_collector - temp_tank
	
	controller_start:	-- turn on pump when delta is high enough and the system isn't in maintenance mode
		UpToNow(pump_off) & delta_temp > DELTA_HIGH_THRESH & !maintenance <-> pump_start
	
	controller_stop:	-- turn off pump when delta is low enough or the system is in maintenance mode
		UpToNow(pump_on) & ( delta_temp < DELTA_LOW_THRESH | maintenance ) <-> pump_stop


	pump_start_off:
		AlwP(!pump_start) -> pump_off

	pump_same_amount:
		pump_in_volume = pump_out_volume
			
	pump_same_temp:
		pump_in_temperature = pump_out_temperature
		
	pump_when_off:
		pump_off -> pump_in_volume = 0
		
	pump_when_on:
		pump_on -> pump_in_volume = PUMP_VOLUME
		
	pump_start:
		UpToNow(pump_off) & pump_start -> Until_ei(pump_stop, pump_on)

	pump_stop:
		UpToNow(pump_on) & pump_stop -> Until_ei(pump_start, pump_off)

	pump_state_unique:
		(pump_off & !pump_on) | (pump_on & !pump_off)


	tap_start_off:
		AlwP(!pump_start) -> !tap_on

	tap_same_amount:
		tap_in_volume = tap_out_volume
		
	tap_temp:
		tap_out_temperature = COLD_SUPPLY_TEMPERATURE
		
	tap_when_off:
		!tap_on -> tap_in_volume = 0
		
	tap_when_on:
		tap_on -> tap_in_volume = TAP_VOLUME


		collector_no_state_changes:
			0 < collector_temperature < 100 &
			0 < pump_out_temperature < 100 &
			0 < collector_out_temperature < 100;
			
		collector_volume_within_bounds: 
			0 < collector_volume <= COLLECTOR_MAX_VOLUME;

		collector_delta_volume_definition:
			collector_delta_volume = pump_out_volume - collector_out_volume
		
		collector_volume_change:
			volume = memo_volume[1] + memo_delta_volume[1];
		
		collector_temperature_out:
			collector_out_temperature = collector_temperature
		
		collector_total_out_volume_definition:
			collector_total_out_volume = collector_out_volume
		
		collector_total_in_volume_temperature_product_definition:
			collector_total_in_volume_temperature_product = pump_out_volume * pump_out_temperature

		collector_total_out_volume_temperature_product_definition:
			collector_total_out_volume_temperature_product = collector_total_out_volume * collector_temperature

		collector_temperature_change:
			collector_temperature = (
						(
							memo_collector_volume[1] * memo_collector_temperature[1]
							- memo_collector_total_out_volume_temperature_product[1]
							+ memo_collector_total_in_volume_temperature_product[1]
						) / collector_volume
						+ sun_heat / (WATER_SPECIFIC_HEAT * collector_volume * WATER_DENSITY)
					);


		no_state_changes_tap:
			0 < tap_in_temperature < 100 ^
			0 < tap_out_temperature < 100

		tank_no_state_changes:
			0 < tank_temperature < 100 &
			0 < collector_out_temperature < 100 &
			0 < pump_in_temperature < 100;
			
		tank_volume_within_bounds: 
			0 < tank_volume <= TANK_MAX_VOLUME;

		tank_delta_volume_definition:
			tank_delta_volume = collector_out_volume - pump_in_volume + tap_in_volume - tap_out_volume

		tank_temperature_out_tap:
			tap_out_temperature = temperature
		

		tank_volume_change:
			volume = memo_volume[1] + memo_delta_volume[1];
		
		tank_temperature_out:
			pump_in_temperature = tank_temperature
		
		tank_total_out_volume_definition:
			tank_total_out_volume = pump_in_volume + tap_out_volume

		tank_total_in_volume_temperature_product_definition:
			tank_total_in_volume_temperature_product = collector_out_volume * collector_out_temperature +
							tap_in_volume * tap_in_temperature

		tank_total_out_volume_temperature_product_definition:
			tank_total_out_volume_temperature_product = tank_total_out_volume * tank_temperature

		tank_temperature_change:
			tank_temperature = (
						(
							memo_tank_volume[1] * memo_tank_temperature[1]
							- memo_tank_total_out_volume_temperature_product[1]
							+ memo_tank_total_in_volume_temperature_product[1]
						) / tank_volume
					);


		periodicity:
			update -> NextTime(update, POLLING_INTERVAL)
		
		sens_tank_update:
			update -> temp_tank = tank_temperature

		sens_collector_update:
			update -> temp_collector = collector_temperature

		sens_tank_hold:
			!update -> temp_tank = memo_temp_tank[1]

		sens_collector_hold:
			!update -> temp_collector = memo_temp_collector[1]
		
		start_update:
			AlwP(!update) -> update

